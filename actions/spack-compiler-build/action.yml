# action.yml
name: 'Spack compiler build'
description: 'Run Scibuilder Spack build'
inputs:
  spack-repository:
    description: 'Spack repository to use'
    default: 'https://github.com/spack/spack.git'
  spack-version:
    description: 'Spack version'
    default: 'develop'
  compiler-name:
    description: 'Name of the compiler'
    required: true
  compiler-package:
    description: 'Name of the compiler package'
    required: true
  system-compiler:
    description: 'System compiler used for building base-compiler'
    required: true
  arch:
    description: 'System architecture for the base compiler'
    required: true
  build-with-name:
    description: 'Name of the dependency compiler'
    default: ''
  build-with-package:
    description: 'Name of the dependency compiler package'
    default: ''
runs:
  using: 'composite'
  steps:
    - name: Initialize spack
      shell: bash
      run: |
        # Clone spack repository

        echo "::group::Clone spack repository"
        bash -c "[[ -d /spack/.git ]] && ( cd /spack && git reset --hard ${{ inputs.spack-version }} )  || ( git clone ${{ inputs.spack-repository }} /spack && cd /spack && git checkout ${{ inputs.spack-version }}  )"
        echo "::endgroup::"

        echo "::group::Activate spack, find system compiler and set up system buildcache"
        # Activate spack
        source /spack/share/spack/setup-env.sh

        # Clean misc cache
        spack clean -m

        # Find system compiler
        spack compiler find

        # Bootstrap cached bootstrap
        spack bootstrap root /buildcache/bootstrap
        spack bootstrap root

        # Create buildcache for compilers
        mkdir -p /buildcache/system
        spack mirror add system_buildcache /buildcache/system
        echo "::endgroup::"

        # List installed packages
        echo "::group::List installed packages in buildcache"
        spack find
        echo "::endgroup::"
    - name: Find dependency compiler
      if: "${{ inputs.build-with-package != '' }}"
      shell: bash
      run: |
        echo "::group::Find dependency compiler "${{ inputs.build-with-package }}
        # Activate spack
        source /spack/share/spack/setup-env.sh

        # Install dependency compiler
        spack install --no-check-signature --use-cache ${{ inputs.build-with-package }} arch=${{ inputs.arch }}

        # Find comppiler from the dependency package
        bash -c "spack location -i "${{ inputs.build-with-package }}" | xargs spack compiler find"
        bash -c "spack location -i "${{ inputs.build-with-package }}" | xargs -I{} spack compiler find {}/compiler/latest/linux/bin"
        bash -c "spack location -i "${{ inputs.build-with-package }}" | xargs -I{} spack compiler find {}/compiler/latest/linux/bin/intel64"
        echo "::endgroup::"
    - name: Install compiler
      shell: bash
      run: |
        echo "::group::Install compiler "${{ inputs.compiler-package }}
        # Activate spack
        source /spack/share/spack/setup-env.sh

        # Find build compiler:
        # inputs.build-with-name > inputs.build-with-package > inputs.system-compiler
        build_with_name=${{ inputs.build-with-name }}
        build_with_package=${{ inputs.build-with-package }}
        system_compiler=${{ inputs.system-compiler }}
        dependency_compiler=${build_with_name:-${build_with_package:-${system_compiler}}}

        # Install compiler using dependency compiler
        spack install --no-check-signature --use-cache ${{ inputs.compiler-package }} %${dependency_compiler} arch=${{ inputs.arch }}

        # Push results to buildcache
        spack buildcache push -a -u /buildcache/system ${{ inputs.compiler-package }}
        spack buildcache update-index /buildcache/system

        # Remove buildcache
        source /spack/share/spack/setup-env.sh
        spack mirror remove system_buildcache
        echo "::endgroup::"
