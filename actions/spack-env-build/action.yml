---
# action.yml
name: 'Scibuilder Spack build'
description: 'Run Scibuilder Spack build'
inputs:
  spack-repository:
    description: 'Spack repository to use'
    default: 'https://github.com/spack/spack.git'
  spack-version:
    description: 'Spack version'
    required: true
  compiler-paths:
    description: 'Compiler paths to add to the environment'
    required: false
    default: ''
  compiler-names:
    description: 'Compiler names to install'
    required: false
    default: ''
  compiler-packages:
    description: 'Compiler packages to install'
    required: false
    default: ''
  system-compiler:
    description: 'System compiler used for building base-compiler'
    required: true
  os:
    description: 'Operating system for the build'
    required: false
    default: ''
  environment:
    description: 'Environment to build'
    required: true
  env-vars:
    description: 'Extra env vars for the build'
    default: ''
  makefile-build:
    description: "Use Spack's Makefile for parallel building"
    default: ''
  njobs:
    description: 'Number of jobs for building'
    default: 16
runs:
  using: 'composite'
  steps:
  - name: Build environment
    shell: bash
    run: |

      echo "::group::Increasing ulimit"
      ulimit -Sn 65536
      echo "::endgroup::"

      EXTRA_ENV_VARS="${{ inputs.env-vars }}"
      if [[ ! -z "$EXTRA_ENV_VARS" ]]
      then
        echo "::group::Setting extra environment variables"
        echo "Extra env vars: $EXTRA_ENV_VARS"
        export $EXTRA_ENV_VARS
        echo "::endgroup::"
      fi

      echo "::group::Clone spack repository"
      bash -c "[[ -d /spack/.git ]] && ( cd /spack && git reset --hard ${{ inputs.spack-version }} )  || ( cd /spack && git init && git remote add origin ${{ inputs.spack-repository }} && git fetch --tags origin && git checkout ${{ inputs.spack-version }} )"
      echo "::endgroup::"

      echo "::group::Activate spack and set up bootstrap store"
      source /spack/share/spack/setup-env.sh

      # Clean misc cache
      spack clean -m

      spack bootstrap root /buildcache/bootstrap
      echo "::endgroup::"

      echo "::group::Activate environment and create build cache"
      spack env activate ${{ inputs.environment }}

      mkdir -p /buildcache/final
      bash -c "spack mirror list | grep -q final_buildcache || spack mirror add final_buildcache /buildcache/final"
      echo "::endgroup::"

      echo "::group::List installed packages in buildcache"
      spack buildcache list --allarch --long --variants
      echo "::endgroup::"

      echo "::group::Add external compilers from compiler paths"
      compiler_paths=(${{ inputs.compiler-paths }})

      len_paths=${#compiler_paths[@]}

      spack compiler find

      if [[ "${compiler_paths[0]}" != '' ]]
      then
        for ((i=0; i<$len_paths; i++))
        do
          compiler_path=${compiler_paths[i]}
          echo "Searching compiler from: ${compiler_path}"
          spack compiler find ${compiler_path}
          spack compiler find ${compiler_path}/compiler/latest/linux/bin
          spack compiler find ${compiler_path}/compiler/latest/linux/bin/intel64
        done
      fi
      echo "Compilers defined:"
      spack compiler list
      echo "::endgroup::"

      compiler_names=(${{ inputs.compiler-names }})
      compiler_packages=(${{ inputs.compiler-packages }})

      len_names=${#compiler_names[@]}
      len_packages=${#compiler_packages[@]}
      [[ $len_names -ne $len_packages ]] && echo 'compiler-names and compiler-packages have unequal amount of entries' && exit 1

      if [[ "${compiler_packages[0]}" != '' ]]
      then
        echo "::group::Add mock compiler entries if compilers are missing"
        bash -c "echo 'compilers:' > ~/.spack/linux/compilers.yaml"
        for ((i=0; i<$len_names; i++))
        do
          compiler_name=${compiler_names[i]}
          echo "Adding $compiler_name to system compiler list"
          bash -c "cat << EOF >> ~/.spack/linux/compilers.yaml
      - compiler:
          spec: ${compiler_name//@/@=}
          paths:
            cc: null
            cxx: null
            f77: null
            fc: null
          flags: {}
          operating_system: ${{ inputs.os }}
          target: x86_64
          modules: []
          environment: {}
          extra_rpaths: []
      EOF"
        done
        echo "Compilers defined:"
        spack compiler list
        echo "::endgroup::"
      fi

      echo "::group::Concretize environment"
      spack concretize -f
      echo "::endgroup::"

      if [[ "${compiler_packages[0]}" != '' ]]
      then

        echo "::group::Install compilers to the environment one by one"
        rm -f ~/.spack/linux/compilers.yaml

        spack compiler find

        [[ -f Makefile ]] && rm Makefile
        spack env depfile -o Makefile

        for ((i=0; i<$len_names; i++))
        do
          compiler_package=${compiler_packages[i]}
          echo "Adding compiler ${compiler_package}"

          compiler_short_name=$(echo "${compiler_package}" | grep -Po '^[^@]+@[A-z0-9-.]+')
          compiler_short_name=${compiler_short_name//@/-}

          compiler_hash=$(grep -Po "^.*${compiler_short_name}-.*: HASH = (.*)" Makefile | awk '{ print $NF }')

          echo "Building compiler ${compiler_package}"
          make "install/${compiler_short_name}-${compiler_hash}" SPACK_INSTALL_FLAGS="--no-check-signature"

          bash -c "spack location -i ${compiler_package} | xargs spack compiler find"
          bash -c "spack location -i ${compiler_package} | xargs -I{} spack compiler find {}/compiler/latest/linux/bin"
          bash -c "spack location -i ${compiler_package} | xargs -I{} spack compiler find {}/compiler/latest/linux/bin/intel64"
        done
        echo "::endgroup::"
      fi

      echo "Compilers defined:"
      spack --env-dir ${{ inputs.environment }} compiler list
      echo "::endgroup::"

      MAKEFILE_BUILD="${{ inputs.makefile-build }}"
      if [[ ! -z "$MAKEFILE_BUILD" ]]
      then
        echo "::group::Install environment with Makefile"
        spack env depfile -o Makefile
        make -j "${{ inputs.njobs }}" SPACK_INSTALL_FLAGS="--no-check-signature"
        echo "::endgroup::"
      else
        echo "::group::Install environment"
        bash -c "spack install -j ${{ inputs.njobs }} --no-check-signature --fail-fast || spack install --no-check-signature --fail-fast --verbose"
        echo "::endgroup::"
      fi

      echo "::group::Refresh Lmod modules"
      spack module lmod refresh --delete-tree --yes
      echo "::endgroup::"

      echo "::group::Push finished products to buildcache"
      spack buildcache push -a -u /buildcache/final

      # Update buildcache index
      spack buildcache update-index /buildcache/final

      spack mirror remove final_buildcache
      echo "::endgroup::"
